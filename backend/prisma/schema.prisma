// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  name       String
  avatarUrl  String?
  
  // OAuth 信息
  provider   String
  providerId String
  
  // 用户偏好设置
  preferences Json?
  
  // 关联的邮箱账户
  emailAccounts EmailAccount[]
  
  // 邮件统计数据
  emailStats    EmailStats[]
  
  // AI 提醒
  aiReminders   AIReminder[]
  
  // 邮件规则
  emailRules    EmailRule[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model EmailAccount {
  id       String @id @default(uuid())
  name     String
  email    String
  provider String // gmail, outlook, imap, other
  status   String @default("connected") // connected, error, syncing
  
  // IMAP 配置
  imapHost     String
  imapPort     Int
  imapSecure   Boolean @default(true)
  imapUsername String
  imapPassword String // 实际应用中应加密存储
  
  // 同步信息
  lastSync DateTime?
  
  // 关联用户
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // 邮件
  emails Email[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
  @@map("email_accounts")
}

model Email {
  id  String @id @default(uuid())
  uid Int // IMAP UID
  
  // 基本信息
  subject   String
  sender    String
  recipient String
  date      DateTime
  
  // 状态
  isRead     Boolean @default(false)
  isStarred  Boolean @default(false)
  flags      String? // IMAP flags as comma-separated string
  
  // 内容
  textContent String?
  htmlContent String?
  attachments Json? // 附件信息
  
  // 分类和标签
  category String?
  priority String? // high, medium, low
  tags     Json? // 标签数组
  
  // 文件夹信息
  folder String @default("INBOX")
  
  // AI 分析结果
  aiAnalysis Json?
  
  // 关联邮箱账户
  accountId String
  account   EmailAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  // AI 提醒
  aiReminders AIReminder[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([accountId, uid])
  @@index([accountId, folder])
  @@index([accountId, isRead])
  @@index([accountId, date])
  @@map("emails")
}

model EmailStats {
  id String @id @default(uuid())
  
  // 统计数据
  totalEmails   Int
  unreadEmails  Int
  readEmails    Int
  repliedEmails Int
  
  // 分类统计
  categoryStats Json?
  
  // 时间统计
  timeStats Json?
  
  // 统计日期
  statsDate DateTime
  
  // 关联用户
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId, statsDate])
  @@map("email_stats")
}

model AIReminder {
  id String @id @default(uuid())
  
  // 提醒配置
  reminderType String // follow_up, deadline, custom
  reminderTime DateTime
  message      String
  
  // 状态
  status String @default("active") // active, triggered, cancelled
  
  // 关联用户和邮件
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailId String
  email   Email  @relation(fields: [emailId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId, status])
  @@index([reminderTime])
  @@map("ai_reminders")
}

model EmailRule {
  id String @id @default(uuid())
  
  // 规则配置
  name       String
  conditions Json // 规则条件
  actions    Json // 执行动作
  
  // 状态
  isActive Boolean @default(true)
  priority Int     @default(0) // 规则优先级
  
  // 统计
  triggerCount   Int       @default(0)
  lastTriggered  DateTime?
  
  // 关联用户
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId, isActive])
  @@map("email_rules")
}